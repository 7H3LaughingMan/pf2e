{
    "_id": "0GU2sdy3r2MeC56x",
    "actorIds": [],
    "author": "4rlSA43v1xPa1vsy",
    "command": "const toChat = (actorName, content) => {\n  const chatData = {\n    user: game.user.id,\n    content,\n    speaker: { alias: actorName }\n  };\n  ChatMessage.create(chatData, {});\n};\n\nconst recover = () => {\n  const entryTypePattern = /^(Focus|Prepared|Spontaneous|Innate)[\\w ]+Spells$/;\n  const characterClass = CONFIG.PF2E.Actor.entityClasses.character;\n  const actors = canvas.tokens.controlled.flatMap(\n    (token) => token.actor instanceof characterClass ? token.actor : []\n  );\n\n  if (actors.length === 0) {\n    ui.notifications.warning(\"Select at least one token.\");\n  }\n\n  for (const actor of actors) {\n    const actorData = duplicate(actor.data);\n    const abilities = actorData.data.abilities;\n    const attributes = actorData.data.attributes;\n\n    // Hit points\n    const conModifier = abilities.con.mod;\n    const level = actorData.data.details.level.value;\n    const maxRestored = Math.max(conModifier, 1) * level;\n    const hpLost = attributes.hp.max - attributes.hp.value;\n    const actualRestored = hpLost >= maxRestored ? maxRestored : hpLost;\n    attributes.hp.value += actualRestored;\n\n    const hpRestoredMsg = actualRestored > 0 ?\n          `${actualRestored} hit points restored. ` :\n          \"Already at full hit points. \";\n\n    // Spellcasting entries\n    const restoredList = [ ];\n    const entries = Array.from(actor.items.values()).filter(\n      (item) => item.type === \"spellcastingEntry\" && entryTypePattern.test(item.name)\n    );\n    const entriesUpdateData = entries.flatMap((entry) => {\n      const entryType = entry.name.match(entryTypePattern)[1];\n\n      // Focus spells\n      if (entryType === \"Focus\") {\n        const focusPool = duplicate(entry.data.data.focus);\n        if (focusPool.points < focusPool.pool) {\n          focusPool.points = focusPool.pool;\n          restoredList.push(\"Focus Pool\");\n          return { _id: entry.id, \"data.focus\": focusPool };\n        }\n\n        return [];\n      }\n\n      // Spontaneous and Prepared spells\n      const slots = entry.data.data.slots;\n      let updated = false;\n      for (const slot of Object.values(slots)) {\n        if ([\"Innate\", \"Spontaneous\"].includes(entryType)) {\n          if (slot.value < slot.max) {\n            slot.value = slot.max;\n            updated = true;\n          }\n        } else {\n          for (const preparedSpell of Object.values(slot.prepared)) {\n            if (preparedSpell.expended) {\n              preparedSpell.expended = false;\n              updated = true;\n            }\n          }\n        }\n      }\n\n      if (updated) {\n        restoredList.push(entry.name);\n        return { _id: entry.id, \"data.slots\": slots };\n      }\n      return [];\n    });\n\n    actor.updateOwnedItem(entriesUpdateData);\n\n    // Stamina points\n    const staminaEnabled = Boolean(\n      parseInt(game.settings.storage.get(\"world\").get(\"pf2e.staminaVariant\").replace(/\"/g, \"\"), 10)\n    );\n    if (staminaEnabled) {\n      const stamina = attributes.sp;\n      const keyAbility = actorData.data.details.keyability.value;\n      if (stamina.value < stamina.max) {\n        stamina.value = stamina.max;\n        restoredList.push(\"Stamina\");\n      }\n      const resolve = attributes.resolve;\n      const maxResolve = abilities[keyAbility].mod;\n      if (resolve.value < maxResolve) {\n        resolve.value = maxResolve;\n        restoredList.push(\"Resolve\");\n      }\n    }\n\n    const restoredString = restoredList.length === 0 ? \"\" :\n                           restoredList.length === 1 ? `${restoredList[0]}` :\n                           restoredList.length === 2 ? `${restoredList.join(\" and \")}` :\n                           (`${restoredList.slice(0, -1).join(\", \")}, and ` +\n                            `${restoredList.slice(-1)[0]}`);\n    const fullyRestored = restoredList.length > 0 ? ` ${restoredString} fully restored.` : \"\";\n\n    actor.update({ \"data.attributes\": attributes });\n    toChat(actor.name,\n           `${actor.name} awakens fully rested. ${hpRestoredMsg}${fullyRestored}`);\n  }\n};\n\nnew Dialog({\n  title: \"Rest\",\n  content: \"<p>Rest for the night?</p>\",\n  buttons: {\n    yes: {\n      icon: '<i class=\"fas fa-check\"></i>',\n      label: \"Rest\",\n      callback: recover\n    },\n    no: {\n      icon: '<i class=\"fas fa-times\"></i>',\n      label: \"Cancel\"\n    },\n  },\n  default: \"yes\"\n}).render(true);\n",
    "flags": {},
    "img": "icons/svg/sleep.svg",
    "name": "Rest for the Night",
    "permission": {
        "default": 0
    },
    "scope": "global",
    "type": "script"
}

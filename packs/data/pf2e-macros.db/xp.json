{
    "_id": "MAHxEeGf31wqv3jp",
    "actorIds": [],
    "author": "pPuCzzCI3xGaMALw",
    "command": "const xpDifferences = new Map();\nxpDifferences.set(-4, 10);\nxpDifferences.set(-3, 15);\nxpDifferences.set(-2, 20);\nxpDifferences.set(-1, 30);\nxpDifferences.set(0, 40);\nxpDifferences.set(1, 60);\nxpDifferences.set(2, 80);\nxpDifferences.set(3, 120);\nxpDifferences.set(4, 160);\n\nfunction getCreatureXP(partyLevel, npcLevel) {\n    // add +1 to all levels to account for -1 npc levels\n    const difference = (npcLevel + 1) - (partyLevel + 1);\n    if (difference < -4) {\n        return 10;\n    } else if (difference > 4) {\n        return 160;\n    } else {\n        return xpDifferences.get(difference);\n    }\n}\n\nconst xp = new Map();\nxp.set('trivial', 40);\nxp.set('low', 60);\nxp.set('moderate', 80);\nxp.set('severe', 120);\nxp.set('extreme', 160);\n\nfunction getEncounterRating(challenge, budgets) {\n    const allLowerBudgets = Object.entries(budgets)\n        .sort((a, b) => a.xp - b.xp)\n        .filter(([_, xp]) => xp <= challenge)\n        .map(([description]) => description);\n    if (allLowerBudgets.length === 0) {\n        return 'trivial';\n    } else {\n        return allLowerBudgets[allLowerBudgets.length - 1];\n    }\n}\n\nfunction getXP(partyLevel, partySize, npcLevels) {\n    const budget = partySize * 20;\n    const challenge = npcLevels\n        .map(npcLevel => getCreatureXP(partyLevel, npcLevel))\n        .reduce((a, b) => a + b, 0);\n    const encounterBudgets = {\n        trivial: budget * .5,\n        low: budget * .75,\n        moderate: budget,\n        severe: budget * 1.5,\n        extreme: budget * 2,\n    };\n    const rating = getEncounterRating(challenge, encounterBudgets);\n    return {\n        partyLevel,\n        partySize,\n        budget,\n        challenge,\n        encounterBudgets,\n        rating,\n        xp: (challenge / partySize) * 4,\n    };\n}\n\nfunction getLevels(actors, type) {\n    return actors\n        .filter(a => a.data.type === type)\n        .map(a => parseInt(a.data.data.details.level.value, 10));\n}\n\nfunction dialogTemplate(xp) {\n    return `\n<h2>XP</h2>\n<table>\n    <tr>\n        <th>Party</th>\n        <td>PCs: ${xp.partySize} (Lv ${xp.partyLevel})</td>\n    </tr>\n    <tr>\n        <th>Rating</th>\n        <td>${xp.rating} (${Math.floor(xp.xp)} XP)</td>\n    </tr>\n    <tr>\n        <th>Total XP</th>\n        <td>PCs: ${Math.floor(xp.budget)} XP, NPCs: ${Math.floor(xp.challenge)} XP</td>\n    </tr>\n</table>\n<h2>Budgets</h2>\n<table>\n    <tr>\n        <th>Trivial</th>\n        <td>${Math.floor(xp.encounterBudgets.trivial)} XP</td>\n    </tr>\n    <tr>\n        <th>Low</th>\n        <td>${Math.floor(xp.encounterBudgets.low)} XP</td>\n    </tr>\n    <tr>\n        <th>Moderate</th>\n        <td>${Math.floor(xp.encounterBudgets.moderate)} XP</td>\n    </tr>\n    <tr>\n        <th>Severe</th>\n        <td>${Math.floor(xp.encounterBudgets.severe)} XP</td>\n    </tr>\n    <tr>\n        <th>Extreme</th>\n        <td>${Math.floor(xp.encounterBudgets.extreme)} XP</td>\n    </tr>\n</table>`;\n}\n\nconst askLevelPopupTemplate = `\n<form>\n<div class=\"form-group\">\n    <label>Party Size</label>\n    <input id=\"party-size\" name=\"party-size\" type=\"number\" value=\"4\">\n</div>\n<div class=\"form-group\">\n    <label>Party level</label>\n    <input id=\"party-level\" name=\"party-level\" type=\"number\" value=\"1\">\n</div>\n</form>\n`\n\nfunction showXP(partyLevel, partySize, npcLevels) {\n    const xp = getXP(partyLevel, partySize, npcLevels);\n    new Dialog({\n        title: 'XP',\n        content: dialogTemplate(xp),\n        buttons: {},\n    }).render(true);\n}\n\nfunction askPartyLevelAndSize(npcLevels) {\n    new Dialog({\n        title: 'Party Information',\n        content: askLevelPopupTemplate,\n        buttons: {\n            no: {\n                icon: '<i class=\"fas fa-times\"></i>',\n                label: 'Cancel'\n            },\n            yes: {\n                icon: '<i class=\"fas fa-calculator\"></i>',\n                label: 'Calculate XP',\n                callback: ($html) => {\n                    const partySize = parseInt($html[0].querySelector('[name=\"party-size\"]').value, 10) ?? 1;\n                    const partyLevel = parseInt($html[0].querySelector('[name=\"party-level\"]').value, 10) ?? 1;\n                    showXP(partyLevel, partySize, npcLevels);\n                }\n            },\n        },\n        default: 'yes'\n    }).render(true);\n}\n\nfunction main() {\n    const actors = canvas.tokens.controlled\n        .map(a => a.actor);\n\n    const npcLevels = getLevels(actors, 'npc');\n    const pcLevels = getLevels(actors, 'character');\n\n    if (npcLevels.length === 0) {\n        ui.notifications.error(`You must select at least one npc token and optionally all PC tokens`);\n        return;\n    }\n\n    if (pcLevels.length === 0) {\n        askPartyLevelAndSize(npcLevels);\n    } else {\n        showXP(pcLevels[0], pcLevels.length, npcLevels);\n    }\n}\n\nmain();",
    "flags": {
        "core": {
            "sourceId": "Macro.EWCgLvKsBoHTVEfv"
        }
    },
    "img": "systems/pf2e/icons/spells/athletic-rush.jpg",
    "name": "XP",
    "permission": {
        "default": 0
    },
    "scope": "global",
    "type": "script"
}
